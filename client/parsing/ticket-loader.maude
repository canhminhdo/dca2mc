load ../../specs/ticket.maude
load ../../full-maude-lite.maude
load ../../database.maude

mod TICKET-DB is
    pr TICKET .
    pr DATABASE-JSON .

    --- op sf : -> State&Formulas .
    --- eq sf = { '`{_`}['__['next:_['0.Zero],'cnt:_['s_^2['0.Zero]],'serve:_['0.Zero],'pc`[_`]:_['p1.Pid,'rs.Loc],'pc`[_`]:_['p2.Pid,'rs.Loc],'ticket`[_`]:_['p1.Pid,'0.Zero],'ticket`[_`]:_['p2.Pid,'0.Zero]]]: [{ '_R_ ['False.FalseFormula ,'_\/_ ['~_ ['inWs1.Prop ],'_U_ ['True.TrueFormula ,'inCs1.Prop ]]]}]} .

    var OCs : Soup{OComp} .
    var TS : TermSet .
    var N :  Nat .
    var I : Pid .
    var L : Loc .

    op errState : -> Config .
    
    op getNext : Config -> Nat .
    eq getNext({(next: N) OCs}) = N .

    op getServe : Config -> Nat .
    eq getServe({(serve: N) OCs}) = N .

    op getTicket : Config Pid -> Nat .
    eq getTicket({(ticket[I]: N) OCs}, I) = N .
    
    op getLoc : Config Pid -> Loc .
    eq getLoc({(pc[I]: L) OCs}, I) = L .
    
    op getCnt : Config -> Nat .
    eq getCnt({(cnt: N) OCs}) = N .
endm

eof

red sf .
red getState(sf) .
red getAndFormulas(sf) .
red downTerm(getState(sf), errState) .
red getNext(downTerm(getState(sf), errState)) .
red getServe(downTerm(getState(sf), errState)) .
red getTicket(downTerm(getState(sf), errState), p1) .
red getLoc(downTerm(getState(sf), errState), p1) .
red getCnt(downTerm(getState(sf), errState)) .
red init .
red AFL2Json(getAndFormulas(sf)) .