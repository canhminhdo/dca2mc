mod DCA2MC-PROCESSING is
    pr DCA2MC-CHECKER .
    pr DCA2MC-PARSING .
    pr DCA2MC-IO .
    pr MOVE-DOWN .
    pr MOVE-UP .

    inc (2TUPLE * (op `(_`,_`) to <<_;_>>,
                 op p1_ to getDatabase,
                 op p2_ to getQidList)) {Database, QidList} .

    vars T T1 T2 T3 T4 T5 T6 T' T1' T2' : Term .
    vars RP1 RP2 : ResultPair .
    vars DB DB' : Database .
    vars QI QI1 QI2 : Qid .
    vars SFS SFS' : SFSet .
    vars RT : ResultType .
    vars TS : TermSet .
    vars TB : Tableau .
    vars NL : NatList .
    vars M : Module .
    vars B : Bool .

    *** initialize command
    op procInitializeCommand : Term Database -> Tuple{Database,QidList} .
    ceq procInitializeCommand('initialize`[_`,_`,_`][T, T1, T2], DB)
    = << initializeDB(QI, T3, T4, T5, T6, TS)  ; 
            ('\b 'Initialization: '\s '\o 'success '\s '\n
                '\o '\t 'moduleQid: QI '\n
                '\o '\t 'initState: T3 '\n
                '\o '\t 'formula: T4 '\n
                '\o '\t 'stateSort: getType(T3) '\n
                '\o '\t 'reducedInitState: metaPrettyPrint(M, T5, none) '\n
                '\o '\t 'reducedFormula: metaPrettyPrint(M, T6, none) '\n
                ) >>
    if QI := parseHeader(T)
    /\ M := upModule(QI, true)
    /\ T1' := solveBubbleAndToken(T1) 
    /\ T2' := solveBubbleAndToken(T2) 
    /\ QI1 := downQidList(T1')
    /\ QI2 := downQidList(T2')
    /\ T3 := buildTerm(QI1, extractType(M, QI1)) --- init term
    /\ T4 := buildTerm(QI2, extractType(M, QI2)) --- formula term
    /\ RP1 := metaReduce(M, T3) 
    /\ RP2 := metaReduce(M, T4) 
    /\ T5 := getTerm(RP1) --- reduced init term
    /\ T6 := getTerm(RP2) --- reduced formula term
    /\ TS := extractAtoms(T6) . --- atoms
    
    eq procInitializeCommand('initialize`[_`,_`,_`][T, T1, T2], DB) 
    = << DB ; ('\r 'Error: '\o 'Incorrect 'input. '\n) >> [owise] .

    --- initialize database
    op initializeDB : Qid Term Term Term Term TermSet -> Database .
    ceq initializeDB(QI, T1, T2, T3, T4, TS) =
    {
        (current: QI),
        (module: upModule(QI, false)),
        (initState: T1),
        (formula: T2),
        (redInitState: T3),
        (redFormula: T4),
        (atoms: TS),
        (depthList: nil),
        (currentDepth: 0),
        (tableau: TB),
        (sfSet: ({T3 : [ getInitNode(TB) ]})),
        (result: unknown)
    } 
    if TB := buildTableau(T4) .

    *** layerCheck command
    op procLayerCheckCommand : Term Database -> Tuple{Database,QidList} .
    ceq procLayerCheckCommand('layerCheck_[T], DB) = 
        << DB' ; (
            procAnalyzeCommand('analyze.@Command@, DB') '\n
            '\b 'LayerCheck: '\s '\o 'success '\n
        ) >>
    if T' := getTerm(
                metaParse(
                    upModule('NAT-LIST, false),
                    downQidList(solveBubbleAndToken(T)),
                    'NatList
                )
            )
    /\ NL := downTerm(T', nil) 
    /\ M := getModule(DB)
    /\ SFS := getSfSet(DB)
    /\ TB := getTableau(DB)
    /\ < RT | SFS' > := collect(M, TB, getVarTerm(getStateSort(DB)), SFS, NL)
    /\ DB' := evalDB(
                DB,
                ((currentDepth: (getCurrentDepth(DB) + sum(NL))),
                (depthList: (append(getDepthList(DB), NL))),
                (sfSet: SFS'),
                (result: RT))
            ) .

    *** lastCheck command
    op procLastCheckCommand : Term Database -> Tuple{Database,QidList} .
    ceq procLastCheckCommand('lastCheck.@Command@, DB)
    = << DB' ; ( if B then 
                    ('\b 'LastCheck: '\s '\o 'success '\n)
                else 
                    ('\r 'LastCheck: '\s '\o 'failure '\n)
                fi) >> 
    if M := getModule(DB)
    /\ SFS := getSfSet(DB)
    --- /\ B := lastLayerCheck(M, SFS)
    /\ B := lastLayerCheckDebug(M, SFS)
    /\ DB' := evalDB(DB, ((sfSet: emptySFS), (result: (if B then satisfied else unstatisfied fi)))) .

    *** check command
    op procCheckCommand : Term Database -> Tuple{Database,QidList} .
    ceq procCheckCommand('check_[T], DB) = 
        << DB' ; (
            procAnalyzeCommand('analyze.@Command@, DB') '\n
            (
                if B then 
                    ('\b 'Check: '\s '\o 'success '\n)
                else 
                    ('\r 'Check: '\s '\o 'failure '\n)
                fi
            )
        ) >>
    if T' := getTerm(
                metaParse(
                    upModule('NAT-LIST, false),
                    downQidList(solveBubbleAndToken(T)),
                    'NatList
                )
            )
    /\ NL := downTerm(T', nil) 
    /\ M := getModule(DB)
    /\ SFS := getSfSet(DB)
    /\ TB := getTableau(DB)
    /\ < RT | SFS' > := collect(M, TB, getVarTerm(getStateSort(DB)), SFS, NL)
    /\ DB' := evalDB(
                DB,
                ((currentDepth: (getCurrentDepth(DB) + sum(NL))),
                (depthList: (append(getDepthList(DB), NL))),
                (sfSet: SFS'),
                (result: RT))
            ) 
    /\ B := if RT == unknown then lastLayerCheck(M, SFS') 
            else (if RT == satisfied then true else false fi) fi .

    *** analyze command
    op procAnalyzeCommand : Term Database -> QidList .
    eq procAnalyzeCommand('analyze.@Command@, DB)
    = ('\b 'Analyzer: '\n
        '\t '\o 'currentDepth: qid(getCurrentDepth(DB)) '\n
        '\t '\o 'depthList: qid(getDepthList(DB)) '\n
        '\t '\o '#sfSet: qid(| getSfSet(DB) |) '\n
        --- '\t '\o '\t qid(analyze(getSfSet(DB))) '\n
        --- '\t '\o '\t qid(getModule(DB), analyzeF(getSfSet(DB))) '\n
        '\t '\o 'result: qid(getResult(DB)) '\n
    ) .
endm